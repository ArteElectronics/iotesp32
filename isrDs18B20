#include <WiFi.h>
#include <WiFiMulti.h>
#include <PubSubClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>

WiFiMulti WiFiMulti;
#define LED1 2
#define uS_a_S_FACTOR 1000000  /* x 1'000'000 para tener segundos */
#define TIME  300        /* Tiempo que duerme en Segundos */
const int oneWireBus = 4;
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);


#define TOKEN "BBFF-oUEJ0rajUSPQtIbucHHPY2xFfrexA3n8sLZoI2lyXA0oOIk9m8Hgqo4" // Put your Ubidots' TOKEN
#define MQTT_CLIENT_NAME "arteMQTT_" // MQTT client Name, please enter your own 8-12 alphanumeric character ASCII string; 
                                           //it should be a random and unique ascii string and different from all other devices

/****************************************
 * Define Constants
 ****************************************/
#define VARIABLE_LABEL "sensor" // Assing the variable label
#define VARIABLE_LABEL1 "sensor1" //Assing the variable label
#define VARIABLE_LABEL2 "sensor2" //Assing the variable label

#define DEVICE_LABEL "esp32" // Assig the device label

#define SENSOR 12 // Set the GPIO12 as SENSOR
#define SENSOR1 13 //Set the GPIO13 as SENSOR1

char mqttBroker[]  = "industrial.api.ubidots.com";
char payload[100];
char topic[150];
// Space to store values to send
char str_sensor[10];
char str_sensor1[10];
char str_sensor2[10];
WiFiClient ubidots;
PubSubClient client(ubidots);
void callback(char* topic, byte* payload, unsigned int length) {
  char p[length + 1];
  memcpy(p, payload, length);
  p[length] = NULL;
  String message(p);
  Serial.write(payload, length);
  Serial.println(topic);
}

RTC_DATA_ATTR int bootNum = 0;

void setup()
{
  Serial.begin(115200);
  sensors.begin();
  delay(100);
   wificonnection();
   senddata();


  //incrementa cada vez que se depierta
  bootNum++;
  Serial.println("numero de boot: " + String(bootNum));

  // imprime razon pro la cual se despert√≥...
  print_porque_desperte(); 
  //wificonnection();

  /*
    Lo primero es configurar las razones que lo despiertan
    le indicamos que se derpierte cada 6 segundos
  */
  esp_sleep_enable_timer_wakeup(TIME * uS_a_S_FACTOR); 
  Serial.println("Se configura para despertar en " + String(TIME) +
  " segundos");

 
  Serial.println("A dormir........................ ");
  Serial.flush(); 
  esp_deep_sleep_start();

  
  Serial.println("Esto nunca se imprime");
}

void loop()
{
  //El programa nunca llega hasta aqui
}

void print_porque_desperte()
{
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();

  switch(wakeup_reason)
  {
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Me desperte por una senal externa usando RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Me desperte por una senal externa usando RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Me desperte por el timer!"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Me desperte por el touchpad"); break;   
  }
}
 void wificonnection()
 {
   WiFiMulti.addAP("VTR-8870527", "w5jzHcfBkkyn");

    Serial.println();
    Serial.println();
    Serial.print("Waiting for WiFi... ");

    while(WiFiMulti.run() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }

    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    client.setServer(mqttBroker, 1883);
    client.setCallback(callback);
    delay(500);
   }
   void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    
    // Attemp to connect
    if (client.connect(MQTT_CLIENT_NAME, TOKEN, "")) {
      Serial.println("Connected");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");
      // Wait 2 seconds before retrying
      delay(2000);
    }
  }
}

float temperatureSensor(){
  sensors.requestTemperatures();
  float temperatureC = sensors.getTempCByIndex(0);
  return(temperatureC);
  delay(1000);
  
  }
void senddata(){
   if (!client.connected()) {
    reconnect();
  }

  sprintf(topic, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", ""); // Cleans the payload
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL); // Adds the variable label
  
  float sensor = analogRead(SENSOR); 
  
  /* 4 is mininum width, 2 is precision; float value is copied onto str_sensor*/
  dtostrf(sensor, 4, 2, str_sensor);
  
  sprintf(payload, "%s {\"value\": %s}}", payload, str_sensor); // Adds the value
  Serial.println("Publishing data to Ubidots Cloud sensor");
  client.publish(topic, payload);
  client.loop();
  delay(1000);
  //probe sensor 2
  sprintf(topic, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", ""); // Cleans the payload
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL1); // Adds the variable label
  
  float sensor1 = analogRead(SENSOR1); 
  
  /* 4 is mininum width, 2 is precision; float value is copied onto str_sensor*/
  dtostrf(sensor1, 4, 2, str_sensor1);
  
  sprintf(payload, "%s {\"value\": %s}}", payload, str_sensor1); // Adds the value
  Serial.println("Publishing data to Ubidots Cloud sensor 1");
  client.publish(topic, payload);
  client.loop();
  delay(1000);
  //probe sensor 3 temperature
  sprintf(topic, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", ""); // Cleans the payload
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL2); // Adds the variable label
  
  float sensor2 = temperatureSensor(); 
  
  /* 4 is mininum width, 2 is precision; float value is copied onto str_sensor*/
  dtostrf(sensor2, 4, 2, str_sensor2);
  
  sprintf(payload, "%s {\"value\": %s}}", payload, str_sensor2); // Adds the value
  Serial.println("Publishing data to Ubidots Cloud temperature");
  client.publish(topic, payload);
  client.loop();
  delay(1000);
  
  
}
